% ---------------------- %
% -- IMPORTS REQUIRED -- %
% ---------------------- %

% C
\RequirePackage{circledsteps}
\RequirePackage{commado}
% F
\RequirePackage{forloop}
% I
\RequirePackage{ifmtarg}
% M
\RequirePackage{mathtools}
% N
\RequirePackage{nicematrix}
% P
\RequirePackage{pgfplots}
% R
\RequirePackage{relsize}
% T
\RequirePackage{tkz-tab}
\RequirePackage{tnscom}
% U
\RequirePackage{upgreek}
\PassOptionsToPackage{Symbolsmallscale}{upgreek}
% X
\RequirePackage{xstring}

% TikZ libraries
\usetikzlibrary{calc}
\usetikzlibrary{backgrounds}
\usetikzlibrary{arrows.meta}
\usetikzlibrary{babel}


% --------------- %
% -- CONSTANTS -- %
% --------------- %

% Constants - START

% User's constants

\newcommand\param[1]{%
    \IfStrEqCase{#1}{%
        {gamma}{\upgamma}%
        {pi}{\uppi}%
        {tau}{\uptau}%
    }[\text{\textbf{#1}}]
}

% Classical constants
    
\newcommand\ggamma{\param{gamma}}
\newcommand\ppi{\param{pi}}
\newcommand\ttau{\param{tau}}
\newcommand\ee{\param{e}}
\newcommand\ii{\param{i}}
\newcommand\jj{\param{j}}
\newcommand\kk{\param{k}}

% Constants - END


% ------------------ %
% -- ABS FUNCTION -- %
% ------------------ %

% Source :
%    * https://tex.stackexchange.com/a/43009/6880
%
\DeclarePairedDelimiter\abs{\lvert}{\rvert}%

\let\tnsana@old@abs\abs
\def\abs{\@ifstar{\tnsana@old@abs}{\tnsana@old@abs*}}


% --------------------- %
% -- NAMED FUNCTIONS -- %
% --------------------- %

% Classical functions - START

\DeclareMathOperator{\acos}{\operatorname{acos}}
\DeclareMathOperator{\asin}{\operatorname{asin}}
\DeclareMathOperator{\atan}{\operatorname{atan}}
\DeclareMathOperator{\arccosh}{\operatorname{arccosh}}
\DeclareMathOperator{\arcsinh}{\operatorname{arcsinh}}
\DeclareMathOperator{\arctanh}{\operatorname{arctanh}}
\DeclareMathOperator{\acosh}{\operatorname{acosh}}
\DeclareMathOperator{\asinh}{\operatorname{asinh}}
\DeclareMathOperator{\atanh}{\operatorname{atanh}}
\DeclareMathOperator{\fch}{\operatorname{ch}}
\DeclareMathOperator{\fsh}{\operatorname{sh}}
\DeclareMathOperator{\fth}{\operatorname{th}}
\DeclareMathOperator{\afch}{\operatorname{ach}}
\DeclareMathOperator{\afsh}{\operatorname{ash}}
\DeclareMathOperator{\afth}{\operatorname{ath}}

\let\stdexp\exp
\renewcommand\exp[1][]{%
	\stdexp%
	\if\relax\detokenize{#1}\relax\else%
		_{#1}%
	\fi%
}

\let\stdlog\log
\renewcommand\log[1][]{%
	\stdlog%
	\if\relax\detokenize{#1}\relax\else%
		_{#1}%
	\fi%
}

% Classical functions - END


% ---------------- %
% -- FORMAL DEF -- %
% ---------------- %

% Argument #1: option s or sp
% Argument #2: function
% Argument #3: variable
% Argument #4: formula
% Argument #5: initial set
% Argument #6: final set

\newcommand\funcdef[6][u]{%
    %
    \IfEqCase{#1}{%
        {u}{\let\callit\tnsana@func@def@usual}%
        {s}{\let\callit\tnsana@func@def@no@vrule}%
        {h}{\let\callit\tnsana@func@def@inline}%
    }[%
        \PackageError{tnsana}{unknown option}%
                             {you can use u (default), s and h}%
    ]%
    %
	\callit{#2}{#3}{#4}{#5}{#6}%
}


% Argument #1: function
% Argument #2: variable
% Argument #3: formula
% Argument #4: initial set
% Argument #5: final set

\newcommand\tnsana@func@def@inline[5]{%
	#1 : #2%
	\if\relax\detokenize{#4}\relax\else%
		\in #4%
	\fi%
	\mapsto #3%
	\if\relax\detokenize{#5}\relax\else%
		\in #5%
	\fi%
}

\newcommand\txtfuncdef[5]{%
	$#1(#2) = #3$%
	\if\relax\detokenize{#4}\relax\else%
		\ pour $#2 \in #4$%
	\fi%
	\if\relax\detokenize{#5}\relax\else%
		\ \emph{(on sait que $#1(#2) \in #5$)}%
	\fi%
}


% Argument #1: function
%
% Argument #2: function
% Argument #3: variable
% Argument #4: formula
% Argument #5: initial set
% Argument #6: final set

\newcommand\tnsana@func@def@vertabstract[6]{%
	\begin{array}[t]{l@#1@{\kern.5ex}r@{\kern.5ex}c@{\;}l}
		#2 \colon & #5 & \rightarrow & #6 \\
			      & #3 & \mapsto     & #4%
	\end{array}
}


\newcommand\tnsana@func@def@usual[5]{%
	\tnsana@func@def@vertabstract{{\kern.4ex}|}{#1}{#2}{#3}{#4}{#5}%
}


\newcommand\tnsana@func@def@no@vrule[5]{%
	\tnsana@func@def@vertabstract{{\kern0ex}}{#1}{#2}{#3}{#4}{#5}%
}


% ----------- %
% -- LIMIT -- %
% ----------- %

% Note: some macros of the STY for total derivation are used here.

% Argument #1: parenthesis or not
% Argument #2: function
% Argument #3: variable
% Argument #4: multi-argument

\newcommand\tnsana@limit@abstract[4]{%
    \lim\limits_{%
		\scriptsize%
		\tns@multi@args{|}%
		               {#3\kern0.25ex{\rightarrow}\kern0.25ex#4}%
		               {\begin{NiceArray}{c}}%
		               {\\ }%
		               {\end{NiceArray}}%
	}#1{#2}%
}


% Argument #1: option s or sp
% Argument #2: function
% Argument #3: variable
% Argument #4: multi-argument

\newcommand\limit[4][asit]{%
    \IfEqCase{#1}{%
        {asit}{\let\parithere\tnsana@der@func@no@par}%
        {p}{\let\parithere\tnsana@der@func@ext@par}%
        {sp}{\let\parithere\tnsana@der@func@no@ext@par}%
    }[%
        \PackageError{tnsana}{unknown option}%
                             {you can use asit (default), p and sp}%
    ]%
    %
	\tnsana@limit@abstract{\parithere}{#2}{#3}{#4}%
}


% ------------------------- %
% -- TOTAL DIFF CALCULUS -- %
% ------------------------- %

% Sources :
%    * http://forum.mathematex.net/latex-f6/en-tete-de-ds-t12933.html#p124908
%    * http://forum.mathematex.net/latex-f6/derivee-avec-un-d-droit-et-espace-t12932.html#p124930
%    * http://forum.mathematex.net/latex-f6/remplacer-des-espaces-par-autre-chose-t12952.html#p125062
%    * http://forum.mathematex.net/latex-f6/probleme-de-remplacement-de-cdots-t13047.html#p125782
%    * https://tex.stackexchange.com/a/42445/6880
%    * https://tex.stackexchange.com/a/553843/6880


% dd, partial and pp useful operators
%
% Argument #1: the exponent
% Argument #2: the variable
% Argument #3: the operator
% Argument #4: space before exponent
% Argument #5: space after exponent

\newcommand{\tnsana@diff@ope}[5]{%
    #3%
    \ifx0#1\else%
        ^{\kern#4#1\kern#5}\!%
    \fi%
    \hspace{0.07em}#2%
}


\DeclareRobustCommand\@dder{
    \mathop{}\mathopen{}\mathrm{d}
}


\newcommand\dd[2][0]{\tnsana@diff@ope{#1}{#2}{\@dder}{.05ex}{0.15ex}}


\let\tnsana@original@partial\partial

\renewcommand{\partial}{%
    \tnsana@original@partial\mathopen{}%
}


\newcommand\pp[2][0]{\tnsana@diff@ope{#1}{#2}{\partial}{.15ex}{0.15ex}}


% Common tools

\newcounter{tnsana@der@prime@counter}

\newcommand\tnsana@der@func@no@par[1]{%
    #1%
}

\newcommand\tnsana@der@func@ext@par[1]{%
    \left( #1 \right)%
}

\newcommand\tnsana@der@func@no@ext@par[1]{%
    ( #1 )%
}

\newcommand\tnsana@der@func@under@bracket[1]{%
    \overbracket[.75pt]{#1}%
}


\newbool{tnsana@der@option@u}
\newbool{tnsana@der@option@e}
\newbool{tnsana@der@option@d}
\newbool{tnsana@der@option@bd}

\newbool{tnsana@der@option@i}
\newbool{tnsana@der@option@ei}

\newbool{tnsana@der@option@f}
\newbool{tnsana@der@option@of}
\newbool{tnsana@der@option@sf}
\newbool{tnsana@der@option@osf}

\newbool{tnsana@der@option@p}
\newbool{tnsana@der@option@sp}


% Total derivate

%     + Abstraction
%
%    #1 : macro applied to the function
%    #2 : the function
%    #3 : order of derivation

\newcommand\tnsana@der@usual[3]{%
    #1{#2}^{%
        \,%
        \forloop[1]{tnsana@der@prime@counter}{0}{\value{tnsana@der@prime@counter} < #3}{%
            \prime%
        }%
    }%
}


\newcommand\tnsana@der@exp[3]{%
    #1{#2}^{\left( #3 \right)}%
}


\newcommand\tnsana@der@dot[3]{%
    \mathop{%
        \kern\z@{#1{#2}}%
    }\limits^{%
        \vbox to-1.4\ex@{%
            \kern-\tw@\ex@%
            \hbox{\normalfont%
                %
                \forloop[1]{tnsana@der@prime@counter}{0}{\value{tnsana@der@prime@counter} < #3}{%
                    .%
                }%
            }%
            \vss%
        }%
    }%
}


\newcommand\tnsana@der@bracket@dot[3]{%
    \tnsana@der@dot{\tnsana@der@func@under@bracket}{#1{#2}}{#3}%
}



\newcommand\tnsana@der@sub[3]{
    \@dder%
    \IfStrEq{#3}{1}{}{%
        ^{\kern.15ex#3\kern.15ex}%
    }%
    _{\kern.15ex#2\kern.15ex} #1%
}


%    #1 : \frac or \dfrac 
%    #2 : the function
%    #3 : the variable
%    #4 : order of derivation

\newcommand\tnsana@der@abstract@frac[4]{%
    #1{%
        \IfStrEq{#4}{1}{%
            \dd{#2}%
        }{%
            \dd[#4]{#2}%
        }%
    }{%
        {%
            \dd{#3}%
            \IfStrEq{#4}{1}{}{%
                ^{#4}%
            }%
        }%
    }%
}


%    #1 : the function
%    #2 : the variable
%    #3 : order of derivation

\newcommand\tnsana@der@dfrac[3]{%
    \tnsana@der@abstract@frac{\dfrac}{#1}{#2}{#3}%
}


\newcommand\tnsana@der@frac[3]{
    \tnsana@der@abstract@frac{\frac}{#1}{#2}{#3}%
}


\newcommand\tnsana@der@ope@frac[3]{
    \tnsana@der@abstract@frac{\frac}{}{#2}{#3}#1%
}


\newcommand\tnsana@der@ope@dfrac[3]{
    \tnsana@der@abstract@frac{\dfrac}{}{#2}{#3}#1%
}


%     + Simple version (no var. of derivation)

\newcommand\tnsana@validate@simple@der@option[1]{
    \IfEqCase{#1}{%
        {u}{\booltrue{tnsana@der@option@u}}%
        {e}{\booltrue{tnsana@der@option@e}}%
        {d}{\booltrue{tnsana@der@option@d}}%
        {bd}{\booltrue{tnsana@der@option@bd}}%
        {p}{\booltrue{tnsana@der@option@p}}%
        {sp}{\booltrue{tnsana@der@option@sp}}%
    }[%
        \PackageError{tnsana}{unknown option}%
                             {you can use u (default), e , t , d , bd , p and sp}%
    ]%
}


%    #1 : option of formating
%    #2 : the  function (no var. here)
%    #3 : order of derivation

\newcommand\sder[3][u]{%
    \boolfalse{tnsana@der@option@u}%
    \boolfalse{tnsana@der@option@e}%
    \boolfalse{tnsana@der@option@d}%
    \boolfalse{tnsana@der@option@bd}%
    \boolfalse{tnsana@der@option@p}%
    \boolfalse{tnsana@der@option@sp}%
    %
    \DoWithCSL\tnsana@validate@simple@der@option{#1}
    %
    \ifboolexpr{
        not(
            bool {tnsana@der@option@e}
            or
            bool {tnsana@der@option@d}
            or
            bool {tnsana@der@option@bd}
        )
    }{%
        \booltrue{tnsana@der@option@u}%
    }{}%   
    %
    \ifbool{tnsana@der@option@p}{%
    	\let\parithere\tnsana@der@func@ext@par%
    }{%
        \ifbool{tnsana@der@option@sp}{%
    		\let\parithere\tnsana@der@func@no@ext@par%
        }{%
            \let\parithere\tnsana@der@func@no@par%
        }%
    }%
    %
    \ifbool{tnsana@der@option@u}{%
        \let\callithere\tnsana@der@usual%
    }{%
        \ifbool{tnsana@der@option@e}{%
            \let\callithere\tnsana@der@exp%
        }{%
        	\ifbool{tnsana@der@option@d}{%
            	\let\callithere\tnsana@der@dot%
			}{%
				\let\callithere\tnsana@der@bracket@dot%
			}%
        }%
    }%
    \callithere{\parithere}{#2}{#3}%
}


%     + Strict version (this one needs the var. of derivation)

\newcommand\tnsana@validate@der@option[1]{
    \IfEqCase{#1}{%
        {u}{\booltrue{tnsana@der@option@u}}%
        {e}{\booltrue{tnsana@der@option@e}}%
        {d}{\booltrue{tnsana@der@option@d}}%
        {bd}{\booltrue{tnsana@der@option@bd}}%
        {i}{\booltrue{tnsana@der@option@i}}%
        {f}{\booltrue{tnsana@der@option@f}}%
        {of}{\booltrue{tnsana@der@option@of}}%
        {sf}{\booltrue{tnsana@der@option@sf}}%
        {osf}{\booltrue{tnsana@der@option@osf}}%
        {p}{\booltrue{tnsana@der@option@p}}%
        {sp}{\booltrue{tnsana@der@option@sp}}%
    }[%
        \PackageError{tnsana}{unknown option}%
                             {you can use u (default), e , i , f , sf , oi , of , osf , p and sp}%
    ]%
}


\newcommand\der[4][u]{%
    \boolfalse{tnsana@der@option@u}%
    \boolfalse{tnsana@der@option@e}%
    \boolfalse{tnsana@der@option@d}%
    \boolfalse{tnsana@der@option@bd}%
    \boolfalse{tnsana@der@option@i}%
    \boolfalse{tnsana@der@option@f}%
    \boolfalse{tnsana@der@option@of}%
    \boolfalse{tnsana@der@option@sf}%
    \boolfalse{tnsana@der@option@osf}%
    \boolfalse{tnsana@der@option@p}%
    \boolfalse{tnsana@der@option@sp}%
    %
    \DoWithCSL\tnsana@validate@der@option{#1}
    %
    \ifboolexpr{
        not(
            bool {tnsana@der@option@e}
            or
            bool {tnsana@der@option@d}
            or
            bool {tnsana@der@option@bd}
            or
            bool {tnsana@der@option@i}
            or
            bool {tnsana@der@option@f}
            or
            bool {tnsana@der@option@of}
            or
            bool {tnsana@der@option@sf}
            or
            bool {tnsana@der@option@osf}
        )
    }{%
        \booltrue{tnsana@der@option@u}%
    }{}
    % Usual, exponent or dot
    \ifboolexpr{
        bool {tnsana@der@option@u}
        or
        bool {tnsana@der@option@e}
        or
        bool {tnsana@der@option@d}
        or
        bool {tnsana@der@option@bd}
    }{%
        \sder[#1]{#2}{#4}
    }{%    
    % Indice or fraction like
        \ifbool{tnsana@der@option@p}{%
                \let\parithere\tnsana@der@func@ext@par%
        }{%
            \ifbool{tnsana@der@option@sp}{%
                \let\parithere\tnsana@der@func@no@ext@par%
            }{%
                \let\parithere\tnsana@der@func@no@par%
            }%
        }%
     % Big frac
        \ifbool{tnsana@der@option@f}{%
            \let\callithere\tnsana@der@dfrac%
     % Small frac
        }{%
            \ifbool{tnsana@der@option@sf}{%
                \let\callithere\tnsana@der@frac%
     % Indice
            }{%
                \ifbool{tnsana@der@option@i}{%
                    \let\callithere\tnsana@der@sub%
    % Big frac ope
                }{
                    \ifbool{tnsana@der@option@of}{%
                        \let\callithere\tnsana@der@ope@dfrac%
                    }{
    % Small frac ope
                        \ifbool{tnsana@der@option@osf}{%
                            \let\callithere\tnsana@der@ope@frac%
                        }{}%
                    }%
                }%
             }%
        }%
    % Let's do the job
        \callithere{\parithere{#2}}{#3}{#4}%
    }%
}


%     + Operator for total derivations

\newcommand\tnsana@validate@der@operator@option[1]{
    \IfEqCase{#1}{%
        {f}{\booltrue{tnsana@der@option@f}}%
        {sf}{\booltrue{tnsana@der@option@sf}}%
        {i}{\booltrue{tnsana@der@option@i}}%
    }[%
        \PackageError{tnsana}{unknown option}%
                             {you can use f (default), sf and i}%
    ]%
}


\newcommand\derope[3][f]{%
    \boolfalse{tnsana@der@option@f}%
    \boolfalse{tnsana@der@option@sf}%
    \boolfalse{tnsana@der@option@i}%
    %
    \DoWithCSL\tnsana@validate@der@operator@option{#1}
    %
    \ifbool{tnsana@der@option@sf}{}{%
        \ifbool{tnsana@der@option@i}{}{%
            \booltrue{tnsana@der@option@f}%
        }%
    }%
    \der[#1]{}{#2}{#3}%
}


% --------------------------- %
% -- PARTIAL DIFF CALCULUS -- %
% --------------------------- %

% Partial derivate

%     + Abstraction

\newcommand\tnsana@pder@abstract@frac[4]{%
    #1{%
        \pp[#4]{#2}%
    }{%
% ARG 1 = Separator: |
% ARG 2 = All parts: what the user types !
% ARG 3 = Before   : nothing here
% ARG 4 = Between  : ;
% ARG 5 = After    : nothing here
        \tns@multi@args{|}{#3}{\partial}{\,\partial}{}%
    }
}

\newcommand\tnsana@pder@dfrac[3]{%
    \tnsana@pder@abstract@frac{\dfrac}{#1}{#2}{#3}%
}

\newcommand\tnsana@pder@frac[3]{%
    \tnsana@pder@abstract@frac{\frac}{#1}{#2}{#3}%
}

\newcommand\tnsana@pder@ope@dfrac[3]{%
    \tnsana@pder@abstract@frac{\dfrac}{}{#2}{#3}#1%
}

\newcommand\tnsana@pder@ope@frac[3]{%
    \tnsana@pder@abstract@frac{\frac}{}{#2}{#3}#1%
}



\newcommand\tnsana@pder@sub[3]{
% The following command works because xstring traits {...} like a single character.
    \noexpandarg%
    \StrSubstitute{#2}{^}{\tnsana@der@func@no@ext@par}[\@index]%
    \partial%
    ^{\kern.15ex#3\kern.15ex}%
    _{\expandafter\StrSubstitute\expandafter{\@index}{|}{\kern.05em,\kern.05em}}%
    #1%
    \expandarg%
}



\newcommand\tnsana@pder@exp@sub[3]{%
	#1^{\,\prime}_{\kern.25ex\tnsana@pder@multi@expansion{#2}}%
}


\newcommand\tnsana@pder@multi@expansion[1]{%
	\tnsana@pder@multi@split#1|\nil%
}

\def\tnsana@pder@multi@split#1|#2\nil{%
	\tnsana@pder@expand@var#1^\nil%
	\if\relax\detokenize{#2}\relax\else%
		\,\tnsana@pder@multi@split#2\nil%
	\fi%
}

\def\tnsana@pder@expand@var#1^#2\nil{%
	#1%
	\if\relax\detokenize{#2}\relax\else%
		\tnsana@pder@repeat@var{#1}{\tnsana@pder@extract@expo#2\nil}%
	\fi%
}

\def\tnsana@pder@extract@expo#1^\nil{%
	#1%
}

\newcounter{tnsana@pder@exp@sub} 

\newcommand\tnsana@pder@repeat@var[2]{%
	\forloop{tnsana@pder@exp@sub}%
	        {1}{\value{tnsana@pder@exp@sub} < #2}%
	        {\,#1}%
}



%     + With the function given

\newcommand\tnsana@validate@pder@option[1]{
    \IfEqCase{#1}{%
        {i}{\booltrue{tnsana@der@option@i}}%
        {ei}{\booltrue{tnsana@der@option@ei}}%
        {f}{\booltrue{tnsana@der@option@f}}%
        {of}{\booltrue{tnsana@der@option@of}}%
        {sf}{\booltrue{tnsana@der@option@sf}}%
        {osf}{\booltrue{tnsana@der@option@osf}}%
        {p}{\booltrue{tnsana@der@option@p}}%
        {sp}{\booltrue{tnsana@der@option@sp}}%
    }[%
        \PackageError{tnsana}{unknown option}%
                             {you can use f (default), sf, of, osf, i, ei, p and sp}%
    ]%
}


\newcommand\pder[4][f]{%
    \boolfalse{tnsana@der@option@i}%
    \boolfalse{tnsana@der@option@ei}%
    \boolfalse{tnsana@der@option@f}%
    \boolfalse{tnsana@der@option@of}%
    \boolfalse{tnsana@der@option@sf}%
    \boolfalse{tnsana@der@option@osf}%
    \boolfalse{tnsana@der@option@p}%
    \boolfalse{tnsana@der@option@sp}%
    %
    \DoWithCSL\tnsana@validate@pder@option{#1}
    %
    %
    \ifboolexpr{
        not(
            bool {tnsana@der@option@of}
            or
            bool {tnsana@der@option@sf}
            or
            bool {tnsana@der@option@osf}
            or
            bool {tnsana@der@option@i}
            or
            bool {tnsana@der@option@ei}
        )
    }{%
        \booltrue{tnsana@der@option@f}%
    }{}%
    % Parentheses or not
    \ifbool{tnsana@der@option@p}{%
        \let\parithere\tnsana@der@func@ext@par%
    }{%
        \ifbool{tnsana@der@option@sp}{%
            \let\parithere\tnsana@der@func@no@ext@par%
        }{%
            \let\parithere\tnsana@der@func@no@par%
        }%
    }%
    % Expo total
    \IfStrEq{#4}{1}{%
        \def\expotot{}
    }{%
        \def\expotot{#4}
    }%
    % Big frac
    \ifbool{tnsana@der@option@f}{%
        \let\callithere\tnsana@pder@dfrac%
    }{%
    % Big frac ope
        \ifbool{tnsana@der@option@of}{%
            \let\callithere\tnsana@pder@ope@dfrac%
        }{%
    % Small frac
            \ifbool{tnsana@der@option@sf}{%
                \let\callithere\tnsana@pder@frac%
            }{%
    % Small frac ope
                \ifbool{tnsana@der@option@osf}{%
                    \let\callithere\tnsana@pder@ope@frac%
                }{%
    % Indice
                    \ifbool{tnsana@der@option@i}{%
                        \let\callithere\tnsana@pder@sub%
                    }{%
                    	\let\callithere\tnsana@pder@exp@sub%
                    }%
                }%
            }%
        }%
    }%
    % Let's do the job
    \callithere{\parithere{#2}}{#3}{\expotot}%
}



%     + Operator for partiaal derivations

\newcommand\pderope[3][f]{%
    \boolfalse{tnsana@der@option@f}%
    \boolfalse{tnsana@der@option@sf}%
    \boolfalse{tnsana@der@option@i}%
    %
    \DoWithCSL\tnsana@validate@der@operator@option{#1}
    %
    \ifbool{tnsana@der@option@sf}{}{%
        \ifbool{tnsana@der@option@i}{}{%
            \booltrue{tnsana@der@option@f}%
        }%
    }%
    \pder[#1]{}{#2}{#3}%
}


% ------------ %
% -- TABLES -- %
% ------------ %

% Better style for arrowhead !

\tkzTabSetup[%
    arrowstyle     = triangle 60,%
    doubledistance = 3pt%
]


% Graph Sign to decorate tkzTables.
%
% Sources
%    + https://tex.stackexchange.com/a/549546/6880
%    + https://groups.google.com/forum/#!topic/fr.comp.text.tex/X6aIq-SZDFA
%    + https://tex.stackexchange.com/a/91424/6880
%    + https://tex.stackexchange.com/a/159132/6880

% Single highlight a line
%
%    #1 : color
%    #2 : nb of the line
\newcommand\tnsana@back@line[2]{
    \begin{scope}[on background layer]
        \path [fill=#1] (T0#2) rectangle (T2\the\numexpr#2+1\relax);
    \end{scope}
}  

% Highlight a line
%
%    #1 : color
%    #2 : nb of the line

\ExplSyntaxOn
    \NewDocumentCommand\backLine{O{gray!30}m}{
        \clist_map_inline:nn{#2}{\tnsana@back@line{#1}{##1}}
    }
\ExplSyntaxOff


% For comments and graphs

\newcommand\@tkzdeco@node@middle[1]{
    \coordinate (M) at ($(T2#1)!.5!(T2\the\numexpr#1+1\relax)$)
}

% Comment a line
%
%    #1 : color
%    #2 : nb of the line
%    #3 : text
\newcommand\comLine[3][blue]{
    \@tkzdeco@node@middle{#2};
    \path
        (M.east) + (.6,0) node[right, #1]{\footnotesize#3}
    ;
}


% Options : gso = graphtnsana@sign@option

\newcounter{tnsana@gso@nb@functions}
\newcommand\tnsana@gso@function{}

\newcounter{tnsana@gso@nb@a@constraints}
\newcommand\tnsana@gso@a@constraints{}

\newcounter{tnsana@gso@nb@d@constraints}
\newcommand\tnsana@gso@d@constraints{}


\newcommand\tnsana@validate@graphtnsana@sign@option[1]{%
    % Parameter a
    \IfSubStr{an,ap}{#1}{%
        \stepcounter{tnsana@gso@nb@a@constraints}%
        \renewcommand\tnsana@gso@a@constraints{@#1}%
    }{%
    % Parameter d
        \IfSubStr{dn,dp,dz}{#1}{%
            \stepcounter{tnsana@gso@nb@d@constraints}%
            \renewcommand\tnsana@gso@d@constraints{@#1}%
        }{%
    % Functions with parameters
            \IfEqCase{#1}{%
                {ax+b}{%
                    \renewcommand\tnsana@gso@function{line}%
                }%
                {ax2+bx+c}{%
                    \renewcommand\tnsana@gso@function{parabola}%
                }%
                {x2}{%
                    \renewcommand\tnsana@gso@function{square}%
                }%
                {sqrt}{%
                    \renewcommand\tnsana@gso@function{sqrt}%
                }%
                {1/x}{%
                    \renewcommand\tnsana@gso@function{inv}%
                }%
                {abs}{%
                    \renewcommand\tnsana@gso@function{abs}%
                }%
                {exp}{%
                    \renewcommand\tnsana@gso@function{exp}%
                }%
                {ln}{%
                    \renewcommand\tnsana@gso@function{ln}%
                }%
            }[%
                \PackageError{tnsana}{unknown option for graphSign}%
                                     {Illegal option given for graphSign : #1 .}%
            ]%
            \stepcounter{tnsana@gso@nb@functions}%
        }% END OF ELSE for parameter d 
    }% END OF ELSE for parameter a 
}


%    #1 : color
%    #2 : nb of the line
%    #3 : kind of graph
\newcommand\graphSign[3][blue]{%
    \renewcommand\tnsana@gso@function{}
    \renewcommand\tnsana@gso@a@constraints{}
    \renewcommand\tnsana@gso@d@constraints{}
    % Processing the options
    \setcounter{tnsana@gso@nb@functions}{0}
    \setcounter{tnsana@gso@nb@a@constraints}{0}
    \setcounter{tnsana@gso@nb@d@constraints}{0}
    %
    \DoWithCSL\tnsana@validate@graphtnsana@sign@option{#3}
    % Only one kind of function ?
    \ifnum\value{tnsana@gso@nb@functions}=1\else%
        \PackageError{tnsana}{only one kind of function can be given graphSign}%
                             {Number of kinds of function given to graphSign = \thetnsana@gso@nb@functions. This is illegal !}%
    \fi%
    % Line need only one constraint for a.
    \IfStrEq{\tnsana@gso@function}{line}{%
        \ifnum\value{tnsana@gso@nb@d@constraints}=0\else%
            \PackageError{tnsana}{constraints for d with lines are nonsense for graphSign}%
                                 {Lines for graphSign need only one constraint for a.}%
        \fi%
        %
        \ifnum\value{tnsana@gso@nb@a@constraints}=1\else%
            \PackageError{tnsana}{one single constraint for a with lines is needed for graphSign}%
                                 {Number of constraints for a given to graphSign = \thetnsana@gso@nb@a@constraints. This is illegal !}%
        \fi%
    }{%
    % Parabola need only one constraint for a and also one for d.
        \IfStrEq{\tnsana@gso@function}{parabola}{%
            \ifnum\value{tnsana@gso@nb@d@constraints}=1\else%
                \PackageError{tnsana}{one single constraint for d with parabolas is needed for graphSign}%
                                     {Number of constraints for d given to graphSign = \thetnsana@gso@nb@a@constraints. This is illegal !}%
            \fi%
            %
            \ifnum\value{tnsana@gso@nb@a@constraints}=1\else%
                \PackageError{tnsana}{one single constraint for a with lines is needed for graphSign}%
                                     {Number of constraints for a given to graphSign = \thetnsana@gso@nb@a@constraints. This is illegal !}%
            \fi%
        %
        }{%
    % No constraint for reference function
            \ifnum\value{tnsana@gso@nb@a@constraints}=0\else%
                \PackageError{tnsana}{one constraint for a with reference function are nonsense for graphSign}%
                                     {Reference functions for graphSign don't need any constraint.}%
            \fi%
            \ifnum\value{tnsana@gso@nb@d@constraints}=0\else%
                \PackageError{tnsana}{one constraint for d with reference function are nonsense for graphSign}%
                                     {Reference functions for graphSign don't need any constraint.}%
            \fi%
        }%
    }%
    % Call of the good function
    \csname  tnsana@sign@\tnsana@gso@function\tnsana@gso@a@constraints\tnsana@gso@d@constraints\endcsname{#1}{#2}
    % Looking for invalid options 
    % Everything is ok.
}



% AXES
%
%    #1 : color
%    #2 : start
%    #3 : end

\newcommand\tnsana@abstract@axes[3]{
	\draw[->, -Latex, #1] (#2) --+ (#3);
}


% LINES
%
% ax+b , ap  -->  \tnsana@sign@line@ap
% ax+b , an  -->  \tnsana@sign@line@an


% Abstraction for the lines
%
%    #1 : color
%    #2 : nb of the line
%    #3 : the root
%    #4 : 1st ordinate
%    #5 : 2nd ordinate
%    #6 : 1st sign
%    #7 : 2nd sign
%    #8 : 1st shifts
%    #9 : 2nd shifts
\newcommand\tnsana@abstract@sign@line[9]{
    \@tkzdeco@node@middle{#2};
    \path
        (M.east) + (.75,0) pic[right]{%
            code = {
                % Axe of abscisses
                \tnsana@abstract@axes{#1}{-0.1,0}{0:2.7}
                % Plot of the function with the signs.
                \draw[#1, thick]
                    (0, #4)   node[xshift = -1.5mm, yshift =#8]
                              {\CircledText{\scriptsize#6}}
                    --
                    (2.5, #5) node[xshift = -4.5mm, yshift = #9]
                              {\CircledText{\scriptsize#7}};
                % 1 root
                \path (1.25,0) node[above, #1]{\footnotesize#3};
        }
    };
}


%    #1 : color
%    #2 : nb of the line
%    #3 : the root
\newcommand\tnsana@sign@line@an[3]{
    \tnsana@abstract@sign@line{#1}{#2}{#3}  %
                              {.65} {-.65}  % 1st and 2nd ordinates
                              {$+$} {$-$}   % 1st and 2nd signs
                              {-4mm}{3.5mm} % 1st and 2nd y shifts
}

%    #1 : color
%    #2 : nb of the line
%    #3 : the root
\newcommand\tnsana@sign@line@ap[3]{
    \tnsana@abstract@sign@line{#1}{#2}{#3}   %
                              {-.65}{.65}    % 1st and 2nd ordinates
                              {$-$} {$+$}    % 1st and 2nd signs
                              {4mm} {-3.5mm} % 1st and 2nd y shifts
}



% PARABOLAS

% ax2+bx+c , ap , dp  -->  \tnsana@sign@parabola@ap@dp
% ax2+bx+c , ap , dn  -->  \tnsana@sign@parabola@ap@dn
% ax2+bx+c , ap , dz  -->  \tnsana@sign@parabola@ap@dz
% ...etc


% a > 0 and delta > 0
%
%    #1 : color
%    #2 : nb of the line
%    #3 : smaller root
%    #4 : bigger root
\newcommand\tnsana@sign@parabola@ap@dp[4]{
    \@tkzdeco@node@middle{#2};
    \path
        (M.east) + (.75,0) pic[right]{%
            code = {
                % Axe of abscisses
                \tnsana@abstract@axes{#1}{-0.1,0}{0:2.7}
                % Plot of the function.
                \draw[#1, thick] (0.25,.6) parabola bend (1.25,-.6) (2.25,.6);
                % The signs.
                \path (.4,.3)     node[left, #1]
                                  {\CircledText{\scriptsize$+$}};
                \path (1.25,0.03) node[below, #1]
                                  {\CircledText{\scriptsize$-$}};
                \path (2.1,.3)    node[right, #1]
                                  {\CircledText{\scriptsize$+$}};
                % 2 roots
                \path (.32,0)  node[below, #1]
                               {\footnotesize#3};
                \path (2.18,0) node[below, #1]
                               {\footnotesize#4};
            }
        };
}


% a < 0 and delta > 0
%
%    #1 : color
%    #2 : nb of the line
%    #3 : smaller root
%    #4 : bigger root
\newcommand\tnsana@sign@parabola@an@dp[4]{
    \@tkzdeco@node@middle{#2};
    \path
        (M.east) + (.75,0) pic[right]{%
            code = {
                % Axe of abscisses
                \tnsana@abstract@axes{#1}{-0.1,0}{0:2.7}
                % Plot of the function.
                \draw[#1, thick] (0.25,-.6) parabola bend (1.25,.6) (2.25,-.6);
                % The signs.
                \path (.4,-.3)     node[left, #1]
                                   {\CircledText{\scriptsize$-$}};
                \path (1.25,-0.03) node[above, #1]
                                   {\CircledText{\scriptsize$+$}};
                \path (2.1,-.3)    node[right, #1]
                                   {\CircledText{\scriptsize$-$}};
                % 2 roots
                \path (.32,0)  node[above, #1]
                               {\footnotesize#3};
                \path (2.18,0) node[above, #1]
                               {\footnotesize#4};
            }
        };
}


% Abstraction for the parabolas with delta = 0
%
%    #1 : color
%    #2 : nb of the line
%    #3 : the root
%    #4 : y shift
%    #5 : 1st ordinate
%    #6 : 2nd ordinate
%    #7 : sign
%    #8 : position
\newcommand\tnsana@abstract@sign@parabola@dz[8]{
    \@tkzdeco@node@middle{#2};
    \path
        (M.east) + (.75,0) pic[right]{%
            code = {
                % Axe of abscisses
                \tnsana@abstract@axes{#1}{-0.1,#6}{0:2.7}
                % Plot of the function.
                \draw[#1, thick] (0.25,#5) parabola bend (1.25,#6) (2.25,#5);
                % The signs.
                \path (.5,#8) node[left, #1]
                              {\CircledText{\scriptsize#7}};
                \path (2,#8)  node[right, #1]
                              {\CircledText{\scriptsize#7}};
                % 1 root
                \path (1.25,#6) node[yshift = #4, #1]
                                {\footnotesize#3};
            }
        };
}


% a > 0 and delta = 0
%
%    #1 : color
%    #2 : nb of the line
%    #3 : root
\newcommand\tnsana@sign@parabola@ap@dz[3]{
    \tnsana@abstract@sign@parabola@dz{#1}{#2}         %
                                     {#3}{0mm, above} % The root and its y shift
                                     {.6}{-.6}        % 1st and 2nd ordinates
                                     {$+$}{-.3}       % The sign and its position
}


% a < 0 and delta = 0
%
%    #1 : color
%    #2 : nb of the line
%    #3 : root
\newcommand\tnsana@sign@parabola@an@dz[3]{
    \tnsana@abstract@sign@parabola@dz{#1}{#2}           %
                                     {#3}{-.1mm, below} % The root and its y shift
                                     {-.6}{.6}          % 1st and 2nd ordinates
                                     {$-$}{.3}          % The sign and its position
}


% Abstraction for the parabolas with delta < 0
%
%    #1 : color
%    #2 : nb of the line
%    #3 : y of the axe
%    #4 : 1st ordinate
%    #5 : 2nd ordinate
%    #6 : sign
%    #7 : ordinate
%    #8 : position
\newcommand\tnsana@abstract@sign@parabola@dn[8]{
    \@tkzdeco@node@middle{#2};
    \path
        (M.east) + (.75,0) pic[right]{%
            code = {
                % Axe of abscisses
                \tnsana@abstract@axes{#1}{-0.1,#3}{0:2.7}
                % Plot of the function.
                \draw[#1, thick] (0.35,#4) parabola bend (1.25,#5) (2.15,#4);
                % The sign.
                \path (1.25,#7) node[#8, #1]
                                {\CircledText{\scriptsize#6}};
            }
        };
}


% a > 0 and delta < 0
%
%    #1 : color
%    #2 : nb of the line
\newcommand\tnsana@sign@parabola@ap@dn[2]{
    \tnsana@abstract@sign@parabola@dn{#1}{#2}         %
                                     {-.55}           % y of the axe
                                     {.57}{-.4}       % 1st and 2nd ordinates
                                     {$+$}{.3}{below} % The sign, its ordinate and its position
}



\newcommand\tnsana@sign@parabola@an@dn[2]{
    \tnsana@abstract@sign@parabola@dn{#1}{#2}          %
                                     {.55}             % y of the axe
                                     {-.57}{.4}        % 1st and 2nd ordinates
                                     {$-$}{-.3}{above} % The sign, its ordinate and its position
}


% REFERENCE

% x2    -->  \tnsana@sign@square
% srqt  -->  \tnsana@sign@square@root
% 1/x   -->  \tnsana@sign@inv
% abs   -->  \tnsana@sign@abs
%
% exp   -->  \tnsana@sign@exp
% ln    -->  \tnsana@sign@ln


% x^2
%
%    #1 : color
%    #2 : nb of the line
\newcommand\tnsana@sign@square[2]{
    \@tkzdeco@node@middle{#2};
    \path
        (M.east) + (.75,0) pic[right]{%
            code = {
                % Axes
                \tnsana@abstract@axes{#1}{-0.1,-0.4}{0:2.7}
                \tnsana@abstract@axes{#1}{1.25,-.6}{90:1.257}
                % Plot of the function.
                \draw[#1, thick] (0.25,.6) parabola bend (1.25,-.4) (2.25,.6);
                % The signs.
                \path (.5,-.1) node[left, #1]
                               {\CircledText{\scriptsize$+$}};
                \path (2,-.1)  node[right, #1]
                               {\CircledText{\scriptsize$+$}};
            }
        };
}


% abs x
%
%    #1 : color
%    #2 : nb of the line
\newcommand\tnsana@sign@abs[2]{
    \@tkzdeco@node@middle{#2};
    \path
        (M.east) + (.75,0) pic[right]{%
            code = {
                % Axes
                \tnsana@abstract@axes{#1}{-0.1,-0.4}{0:2.7}
                \tnsana@abstract@axes{#1}{1.25,-.6}{90:1.257}
                % Plot of the function.
                \draw[#1, thick] (0.1,.6) --++ (1.15,-1) --+ (1.15,1);
                % The signs.
                \path (.5,-.1) node[left, #1]
                               {\CircledText{\scriptsize$+$}};
                \path (2,-.1)  node[right, #1]
                               {\CircledText{\scriptsize$+$}};
            }
        };
}


% sqrt x
%
%    #1 : color
%    #2 : nb of the line
\newcommand\tnsana@sign@sqrt[2]{
    \@tkzdeco@node@middle{#2};
    \path
        (M.east) + (.75,0) pic[right]{%
            code = {
                % Axes
                \tnsana@abstract@axes{#1}{-0.1,-0.4}{0:2.7}
                \tnsana@abstract@axes{#1}{0.1,-.6}{90:1.25}
                % Plot of the function.
                \draw[#1, thick, domain = 0.1:2.5] 
                    % 2.5**-.5 = 0.63
                    plot ({\x}, {.6*sqrt(\x - .1) - .4});
                % The signs.
                \path (.9125,-0.1) node[right, #1]
                                   {\CircledText{\scriptsize$+$}};
            }
        };
}


% 1/x
%
%    #1 : color
%    #2 : nb of the line
\newcommand\tnsana@sign@inv[2]{
    \@tkzdeco@node@middle{#2};
    \path
        (M.east) + (.75,0) pic[right]{%
            code = {
                % Axes
                \tnsana@abstract@axes{#1}{-0.1,0}{0:2.7}
                \tnsana@abstract@axes{#1}{1.25,-.6}{90:1.25}
                % Plot of the function.
                \draw[#1, thick, domain = 1.35:2.35]
                    % .1*.6 * 1.25 = .075
                    %
                    % .065 / (x - 1.25) = .6  <==>  x - 1.25 = .065/.6
                    %                         <==>  x = 1.25 + .065/.6 = 1.358 
                    plot ({\x}, {.065 / (\x - 1.25)});
                \draw[#1, thick, domain = 0.1:1.15]
                    plot ({\x}, {.065 / (\x - 1.25)});
                % The signs.
                    % Cf. parabolas : (1.25 + 2.1)/2 = 1.675
                \path (1.5,.425) node[right, #1]
                                 {\CircledText{\scriptsize$+$}};
                \path (1,-.425)  node[left, #1]
                                 {\CircledText{\scriptsize$-$}};
            }
        };
}


% exp x
%
%    #1 : color
%    #2 : nb of the line
\newcommand\tnsana@sign@exp[2]{
    \@tkzdeco@node@middle{#2};
    \path
        (M.east) + (.75,0) pic[right]{%
            code = {
                % Axes
                \tnsana@abstract@axes{#1}{-0.1,-0.4}{0:2.7}
                \tnsana@abstract@axes{#1}{1.25,-.6}{90:1.25}
                % Plot of the function.
                \draw[#1, thick, domain = -0.1:1.645] 
                    %       .3*exp(3*(x - 1.25)) - .35 = .6
                    % <==>  .3*exp(3*(x - 1.25)) = .95
                    % <==>  x = 1.25 + ln(9.5/3)/3 = 1.634
                    plot ({\x}, {.3*exp(3*(\x - 1.25)) - .35});
                % The signs.
                \path (1,.1) node[left, #1]
                             {\CircledText{\scriptsize$+$}};
            }
        };
}


% ln x
%
%    #1 : color
%    #2 : nb of the line
\newcommand\tnsana@sign@ln[2]{
    \@tkzdeco@node@middle{#2};
    \path
        (M.east) + (.75,0) pic[right]{%
            code = {
                % Axes
                \tnsana@abstract@axes{#1}{-0.1,0}{0:2.7}
                \tnsana@abstract@axes{#1}{0.1,-.6}{90:1.25}
                \draw[->, -Latex, #1] (-0.1,0) --+ (0:2.7);
                \draw[->, -Latex, #1] (0.1,-.6) --+ (90:1.25);
                % Plot of the function.
                \draw[#1, thick, domain = 0.225:2.55]
                    plot ({\x}, {.3*ln((\x - .1))});
                % The signs.
                \path (1.25,.4)    node[right, #1]
                                   {\CircledText{\scriptsize$+$}};
                \path (1.05,-.475) node[left, #1]
                                   {\CircledText{\scriptsize$-$}};
                % 1 root
                \path (1.05,0) node[#1,above]
                               {\footnotesize$1$};
            }
        };
}


% ----------------------- %
% -- INTEGRAL CALCULUS -- %
% ----------------------- %

% Source for minimizing spaces between consecutive integrals :
%    * http://forum.mathematex.net/latex-f6/integrale-triple-t13312.html#p128016

% Consecutive integrals

\let\stdint\int
\DeclareRobustCommand{\int}{%
    \stdint\tnsana@ope@followup{\@ifnextchar{\int}{\!\!}{}}%
}

\def\tnsana@ope@followup#1{%
    \@ifnextchar{^}{\tnsana@ope@followup@sup{#1}}%
        {\tnsana@ope@followup@nosup{#1}}%
}

\def\tnsana@ope@followup@sup#1^#2{%
    \@ifnextchar{_}{\tnsana@ope@followup@sup@sub{#1}^{#2}}%
        {\tnsana@ope@followup@sup@nosub{#1}^{#2}}%
}

\def\tnsana@ope@followup@sup@sub#1^#2_#3{%
    \tnsana@ope@followup@{#1}{#2}{#3}%
}

\def\tnsana@ope@followup@sup@nosub#1^#2{%
    \tnsana@ope@followup@{#1}{#2}{}%
}

\def\tnsana@ope@followup@nosup#1{%
    \@ifnextchar{_}{\tnsana@ope@followup@nosup@sub{#1}}
        {\tnsana@ope@followup@nosup@nosub{#1}}%
}

\def\tnsana@ope@followup@nosup@sub#1_#2{%
    \@ifnextchar{^}{\tnsana@ope@followup@nosup@sub@sup{#1}_{#2}}
        {\tnsana@ope@followup@nosup@sub@nosup{#1}_{#2}}%
}

\def\tnsana@ope@followup@nosup@sub@sup#1_#2^#3{%
    \tnsana@ope@followup@{#1}{#3}{#2}%
}

\def\tnsana@ope@followup@nosup@sub@nosup#1_#2{%
    \tnsana@ope@followup@{#1}{}{#2}%
}

\def\tnsana@ope@followup@nosup@nosub#1{%
    \tnsana@ope@followup@{#1}{}{}%
}

\def\tnsana@ope@followup@#1#2#3{%
    ^{#2}_{#3}#1%
}


% Integration

\newcommand\integrate{\@ifstar{\tnsana@integrate@star}{\tnsana@integrate@no@star}}

\newcommand\tnsana@integrate@star[4]{%
	\int_{#3}^{#4} #1 \dd{#2}%
}

\newcommand\tnsana@integrate@no@star[4]{%
	\tnsana@integrate@star{#1}{#2}{#2\,=\,#3}{#2\,=\,#4}%
}


\newcommand\dintegrate{\@ifstar{\tnsana@dintegrate@star}{\tnsana@dintegrate@no@star}}

\newcommand\tnsana@dintegrate@star[4]{%
	{\displaystyle\integrate*{#1}{#2}{#3}{#4}}%
}

\newcommand\tnsana@dintegrate@no@star[4]{%
	{\displaystyle\integrate{#1}{#2}{#3}{#4}}%
}


% The hook operator

\newcommand\tnsana@hook@small@vertical@phantom[1]{%
	\vphantom{\text{\relsize{1.1}$#1$}}%
}

\newcommand\tnsana@hook@big@vertical@phantom{%
	\vphantom{\relsize{1.25}{\text{$\displaystyle F_1^2$}}}%
}

\newcommand\tnsana@hook@abstract[4][b]{%
    \IfEqCase{#1}{%
        {b}{%
			\left[%
				\tnsana@hook@small@vertical@phantom{#2}%
				\,#2\,%
			\right]%
        }{sb}{%
			\left[%
				\tnsana@hook@big@vertical@phantom \right. \!\!%
				\,#2\,%
				\left. \tnsana@hook@big@vertical@phantom \!\!%
			\right]%
        }{r}{%
            \left. #2\, \right\rvert%
        }{sr}{%
            #2\, {\text{\relsize{1.5}$\rvert$}}%
        }%
    }[
    	\PackageError{tnsana}{unknown option}%
                             {You can use b (default), sb, r or sr.}
    ]%
	_{\,#3}^{\,#4}%
}


\newcommand\hook{\@ifstar{\tnsana@hook@star}{\tnsana@hook@no@star}}

\newcommand\tnsana@hook@star[5][b]{%
	\tnsana@hook@abstract[#1]{#2}{#4}{#5}%
}

\newcommand\tnsana@hook@no@star[5][b]{%
	\tnsana@hook@abstract[#1]{#2}{#3\,=\,#4}{#3\,=\,#5}%
}
